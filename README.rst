Python Android Template
=======================

A template for building Python apps that will run under Android.

Using this template
-------------------

1. Install `cookiecutter`_. This is a tool used to bootstrap complex project
   templates::

    $ pip install cookiecutter

2. Run ``cookiecutter`` on the Python-Android template::

    $ cookiecutter https://github.com/pybee/Python-Android-template

3. `Download the Python Android support package`_. This package contains
   two directories:

   * ``python``

   * ``libs``

   These directories should be placed in the same directory as
   the ``app`` and ``app_packages`` directories generated by the cookiecutter
   project template.

   Alternatively, you can download the full `Python-Android-support`_
   project, and build your own versions of these libraries.

If this all worked, a project called ``myproject`` should have a directory
structure that looks something like::

    android/
        app/
            myproject
                __init__.py
                main.py
        app_packages/
        libs/
            ...
        res/
            ...
        src/
            ...
        AndroidManifest.xml
        ant.properties
        build.xml
        custom_rules.xml
        local.properties
        LICENSE
        proguard-project.txt
        project.properties

You're now ready to build and run your project!

To run the app on your phone, you'll need to plug it in to a USB port,
and configure your phone for development. The Android developer documentation
has a full set of instructions:

    http://developer.android.com/tools/device.html#setting-up

Then, ``cd`` into the top level project directory (``android`` by default)
and run the following (substituting your project name for ``myproject``)::

  $ ant debug
  $ adb install -r bin/myproject-debug.apk
  $ adb shell am start -n com.example.myproject/org.pybee.android.PythonActivity

This will compile, install and run your new Android project on your device.

Note that the ``adb shell am start`` command has two Java path references -
the first (``com.example.myproject``) is the reference to your project name,
and should be updated to reflect your own project. The second is a reference to
the support libraries that start the Python project; this reference should
**not** be updated.

If you want to see the logs produced by this code while it runs, use::

  $ adb logcat Python:* *:E dalvikvm:* DEBUG:*

This will output:

* All the log messages (including stdout and stderr) produced by Python code

* All ERROR level log messages

* All message of any type generated by the Android Dalvik VM

* Any message produced by the DEBUG crash reporting system.

Next steps
----------

Of course, just running Python code isn't very interesting by itself - you'll
be able to output to the console, but if you tap the icon on your phone, you
won't see anything on the screen - you'll only see content in the logs.

To do something interesting, you'll need to work with the native Android
system libraries to draw widgets and respond to screen taps. The support
libraries you added in step 3 have the `Rubicon`_ Java bridging library pre-
installed to enable an easy interface with the Android system libraries.

Or, you could use a library like `toga`_ that provides a cross-platform widget
toolkit that supports Android.

If you have any external library dependencies (like `toga`_, or anything other
third-party library), you should install the library code into the
``app_packages`` directory. This directory is the same as a  ``site_packages``
directory on a desktop Python install.

It's also worth noting that the ``app`` and ``app_packages`` code don't need
to contain the **actual** code. If it's more convenient to keep the code
somewhere else, you can symlink to the actual code inside the ``app`` or
``app_packages`` directory. At compile time, the symlink will be resolved and
copied to the app bundle, but during development, you can avoid having copies
of code in your source repositories.

One pattern for doing this is to have a top level project directory that
contains the source module, and an ``android`` directory at the same level
that links in the project source::

    myproject/
        android/
            app/
                myproject -> ../../myproject
            ...
        myproject/
            __init__.py
            main.py
            other.py
        setup.py

.. _cookiecutter: http://github.com/audreyr/cookiecutter
.. _Download the Python Android support package: https://github.com/pybee/Python-Android-support/releases/download/2.7.2-b1/Python-2.7.2-Android-support.b1.tar.gz
.. _Python-Android-support: https://github.com/pybee/Python-Android-support
.. _Rubicon: http://github.com/pybee/rubicon-java
.. _toga: http://pybee.org/toga
